use aes128_SIMD::keys::expansion;
use aes128_SIMD::cipher::{cipher, inv_cipher};
use aes128_SIMD::base64::base64_encode;
use aes128_SIMD::padding::{pad_buffer, remove_padding};

#[test]
fn test_cipher() {
    let key: [u8; 16] = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];
    let mut w: [u8; 176] = [0; 176];
    expansion(&key, &mut w);

    let in_data: [u8; 16] = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34];
    let mut out: [u8; 16] = [0; 16];
    cipher(&in_data, &mut out, &w);

    let expected_out: [u8; 16] = [0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32];
    assert_eq!(out, expected_out);
}

#[test]
fn test_inv_cipher() {
    let key: [u8; 16] = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];
    let mut w: [u8; 176] = [0; 176];
    expansion(&key, &mut w);

    let in_data: [u8; 16] = [0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32];
    let mut out: [u8; 16] = [0; 16];
    inv_cipher(&in_data, &mut out, &w);

    let expected_out: [u8; 16] = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34];
    assert_eq!(out, expected_out);
}

#[test]
fn test_padding() {
    let input: [u8; 9] = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31];
    let mut output: Vec<u8> = Vec::new();
    let mut output_len: usize = 0;
    pad_buffer(&input, input.len(), &mut output, &mut output_len);

    let expected_output: Vec<u8> = vec![0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07];
    assert_eq!(output, expected_output);
    assert_eq!(output_len, 16);

    let unpadded_len = remove_padding(&output, output_len);
    assert_eq!(unpadded_len, 9);
}

#[test]
fn test_base64_encode() {
    let input: [u8; 3] = [0x4d, 0x61, 0x6e];
    let encoded = base64_encode(&input, input.len());

    let expected_encoded = "TWFu";
    assert_eq!(encoded, expected_encoded);
}

fn main() {}