/// Represents different token types recognized by the lexer.
#[derive(Debug, PartialEq)]
pub enum TokenType {
TT_LITERAL,
TT_IDENTIFIER,
TT_OPAREN,
TT_CPAREN,
TT_OBRACE,
TT_CBRACE,
TT_OBRACKET,
TT_CBRACKET,
TT_SEMI,
TT_NO_TOKEN,
TT_EOF,
TT_NEWLINE,
TT_POUND,
TT_PERIOD,
TT_COMMA,
TT_QMARK,
TT_MINUS,
TT_PLUS,
TT_STAR,
TT_SLASH,
TT_ASSIGN,
TT_COLON,
TT_MOD,
TT_BAND,
TT_LAND,
TT_BOR,
TT_LOR,
TT_DEC,
TT_INC,
TT_PLUSPLUS,
TT_MINUSMINUS,
TT_DIVEQ,
TT_MULEQ,
TT_MODEQ,
TT_BANDEQ,
TT_BOREQ,
TT_LANDEQ,
TT_LOREQ,
TT_GREATER,
TT_LESS,
TT_LESSEQ,
TT_GREATEREQ,
TT_LEFTSHIFT,
TT_RIGHTSHIFT,
TT_LNOT,
TT_BNOT,
TT_EQUALS,
TT_NOTEQ,
TT_XOR,
TT_XOREQ,
TT_POINT,
TT_LEFTSHIFTEQUALS,
TT_RIGHTSHIFTEQUALS,
TT_AUTO,
TT_BREAK,
TT_CHAR,
TT_CONST,
TT_CASE,
TT_CONTINUE,
TT_DOUBLE,
TT_DO,
TT_DEFAULT,
TT_ENUM,
TT_ELSE,
TT_EXTERN,
TT_FLOAT,
TT_FOR,
TT_GOTO,
TT_IF,
TT_INT,
TT_LONG,
TT_RETURN,
TT_REGISTER,
TT_STATIC,
TT_SWITCH,
TT_SHORT,
TT_SIGNED,
TT_STRUCT,
TT_SIZEOF,
TT_TYPEDEF,
TT_UNSIGNED,
TT_UNION,
TT_VOID,
TT_VOLATILE,
TT_WHILE,
}
/// The maximum length of a token in C code; here it serves as a reference.
pub const TOKEN_LENGTH: usize = 256;
/// Represents a token with its type, contents, position, and the file it came from.
#[derive(Debug)]
pub struct Token {
pub token_type: TokenType,
pub contents: String,
pub length: usize,
pub source_file: String,
pub line: i32,
pub column: i32,
}