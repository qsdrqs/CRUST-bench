        -:    0:Source:tests/timing.c
        -:    1:#define _GNU_SOURCE
        -:    2:
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <sys/timeb.h>
        -:    7:#include <bostree.h>
        -:    8:#include <time.h>
        -:    9:#include "test_helpers.h"
        -:   10:
    #####:   11:int main(int argc, char *argv[]) {
    #####:   12:	int i;
    #####:   13:	BOSTree *tree = bostree_new((BOSTree_cmp_function)strcmp, NULL);
    #####:   14:	struct timeb t1, t2;
    #####:   15:	float gestime = 0;
        -:   16:
    #####:   17:	if(argc > 1) {
    #####:   18:		time_t seed = atol(argv[1]);
    #####:   19:		printf("Using seed %lu from command line\n", seed);
    #####:   20:		srand(seed);
        -:   21:	}
        -:   22:	else {
    #####:   23:		time_t seed = time(NULL);
    #####:   24:		printf("Using seed %lu\n", seed);
    #####:   25:		srand(seed);
        -:   26:	}
        -:   27:
    #####:   28:	for(i=0; i<10000000; i++) {
    #####:   29:		char *name = malloc(32);
    #####:   30:		int j;
    #####:   31:		do {
    #####:   32:			for(j=0; j<32; j++) {
    #####:   33:				name[j] = 'A' + (unsigned long)rand() * (unsigned long)('Z' - 'A') / RAND_MAX;
        -:   34:			}
    #####:   35:			name[32] = 0;
    #####:   36:		} while(bostree_lookup(tree, name) != NULL);
        -:   37:
    #####:   38:		ftime(&t1);
    #####:   39:		bostree_insert(tree, name, 0);
    #####:   40:		ftime(&t2);
        -:   41:
    #####:   42:		gestime += (t2.time - t1.time ) * 1000 + t2.millitm - t1.millitm;
        -:   43:
    #####:   44:		if(i % 1000000 == 0) {
    #####:   45:			printf("%07d elements, inserting a value takes %1.5e s/op\n", bostree_node_count(tree), gestime / 1e9);
    #####:   46:			test_tree_sanity(tree);
    #####:   47:			printf(" sanity check passed\n");
    #####:   48:			gestime = 0;
        -:   49:		}
        -:   50:	}
        -:   51:
        -:   52:	float selecttime = 0;
        -:   53:	float deletetime = 0;
        -:   54:
    #####:   55:	for(; i>0; i--) {
    #####:   56:		int w = rand() * i / RAND_MAX;
    #####:   57:		ftime(&t1);
    #####:   58:		BOSNode *node = bostree_select(tree, w);
    #####:   59:		ftime(&t2);
    #####:   60:		selecttime += (t2.time - t1.time ) * 1000 + t2.millitm - t1.millitm;
        -:   61:
    #####:   62:		if(!node) {
    #####:   63:			printf("Node missing!\n");
    #####:   64:			test_tree_sanity(tree);
    #####:   65:			exit(1);
        -:   66:		}
        -:   67:
    #####:   68:		ftime(&t1);
    #####:   69:		bostree_remove(tree, node);
    #####:   70:		ftime(&t2);
    #####:   71:		deletetime += (t2.time - t1.time ) * 1000 + t2.millitm - t1.millitm;
        -:   72:
    #####:   73:		if(i % 1000000 == 0) {
    #####:   74:			printf("%07d elements, selecting a value takes %1.5e s/op, removing a value takes %1.5e s/op\n", bostree_node_count(tree), selecttime / 1e9, deletetime / 1e9);
    #####:   75:			test_tree_sanity(tree);
    #####:   76:			printf(" sanity check passed\n");
    #####:   77:			selecttime = 0;
    #####:   78:			deletetime = 0;
        -:   79:		}
        -:   80:	}
        -:   81:
    #####:   82:	return 0;
        -:   83:}
