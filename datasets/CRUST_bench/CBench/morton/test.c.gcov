        -:    0:Source:tests/test.c
        -:    1:/* -*- mode:c;indent-tabs-mode:nil;c-basic-offset:4;coding:utf-8 -*-
        -:    2:   vi: set et ft=c ts=4 sts=4 sw=4 fenc=utf-8 :vi
        -:    3:
        -:    4:   Copyright 2024 Justine Alexandra Roberts Tunney
        -:    5:
        -:    6:   Permission to use, copy, modify, and/or distribute this software for
        -:    7:   any purpose with or without fee is hereby granted, provided that the
        -:    8:   above copyright notice and this permission notice appear in all copies.
        -:    9:
        -:   10:   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
        -:   11:   WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
        -:   12:   WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
        -:   13:   AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
        -:   14:   DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
        -:   15:   PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
        -:   16:   TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        -:   17:   PERFORMANCE OF THIS SOFTWARE. */
        -:   18:
        -:   19:#include "../morton.h"
        -:   20:
        -:   21:#include <assert.h>
        -:   22:
  4002000:   23:static inline unsigned rand32(void) {
        -:   24:    /* Knuth, D.E., "The Art of Computer Programming," Vol 2,
        -:   25:       Seminumerical Algorithms, Third Edition, Addison-Wesley, 1998,
        -:   26:       p. 106 (line 26) & p. 108 */
        -:   27:    static unsigned long long lcg = 1;
  4002000:   28:    lcg *= 6364136223846793005;
  4002000:   29:    lcg += 1442695040888963407;
  4002000:   30:    return lcg >> 32;
        -:   31:}
        -:   32:
        1:   33:int main() {
       1*:   34:    assert(morton(0, 0) == 0);
       1*:   35:    assert(morton(0, 1) == 1);
       1*:   36:    assert(morton(1, 0) == 2);
       1*:   37:    assert(morton(1, 1) == 3);
        -:   38:#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
       1*:   39:    assert(morton(0b0011, 0b0000) == 0b1010);
       1*:   40:    assert(morton(0b0000, 0b0011) == 0b0101);
       1*:   41:    assert(morton(0b1100, 0b0011) == 0b10100101);
        -:   42:#endif
       1*:   43:    assert(morton(0x347210d1u, 0xc6843fadu) == 0x5a346a180755e653ull);
        1:   44:    int N = 2000;
     2001:   45:    for (int i = 0; i < N; ++i) {
     2000:   46:        unsigned x = rand32();
  4002000:   47:        for (int j = 0; j < N; ++j) {
  4000000:   48:            unsigned y = rand32();
  4000000:   49:            unsigned long long z = morton(x, y);
  4000000:   50:            struct Morton m = unmorton(z);
 4000000*:   51:            assert(m.lo == x);
 4000000*:   52:            assert(m.hi == y);
        -:   53:        }
        -:   54:    }
        -:   55:}
